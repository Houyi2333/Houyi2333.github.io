{"meta":{"title":"你不定积分没加C的博客","subtitle":"除了不定积分，还有微分方程通解需要+C","description":"","author":"你不定积分没加C","url":"https://Houyi2333.github.io","root":"/"},"pages":[{"title":"分类","date":"2024-01-03T02:59:22.000Z","updated":"2024-01-22T02:33:24.988Z","comments":true,"path":"categories/index.html","permalink":"https://houyi2333.github.io/categories/","excerpt":"","text":""},{"title":"关于","date":"2024-01-22T02:32:04.000Z","updated":"2024-01-22T02:34:56.042Z","comments":true,"path":"about/index.html","permalink":"https://houyi2333.github.io/about/","excerpt":"","text":"大连理工大学软件学院本科在读，OurEDA实验室Web方向"}],"posts":[{"title":"React 开发入门","slug":"React 开发入门","date":"2024-01-22T06:50:06.000Z","updated":"2024-01-22T11:45:09.379Z","comments":true,"path":"2024/01/22/14-50-06/","permalink":"https://houyi2333.github.io/2024/01/22/14-50-06/","excerpt":"什么是 React ？在2024年的今天，我们的浏览器仍然采用最基本的 html + CSS + JavaScript 构建页面，但是我们可以很明显的感觉到，编写原生三件套代码是比较复杂的。并且在 Web 项目规模庞大和设备多样性越发丰富的今天，代码的可维护性、开发效率、跨平台开发、性能等因素都会影响到我们对开发工具的选择。因此人们想到了一种方式，可不可以先编写一些简化的、高效率的代码，然后用他们生成 html + CSS + JavaScript 并运行在浏览器上。就像是我们不必编写汇编语言，写 C语言 即可构建可执行文件。就这样， React 诞生了 维基百科这样定义 React ：React 是一个前端 JavaScript 工具库，用于基于 UI 组件构建用户界面 当前常用的工具（库或框架）不止有 React ，比如 Vue、Angular 等都是常见的构建前端页面的工具 MDN 这样描述 React ：React 不是一个框架——它的应用甚至不局限于 Web 开发，它可以与其他库一起使用以渲染到特定环境。例如， React Native 可用于构建移动应用程序； React 360 可用于构建虚拟现实应用程序…… React 是一门令人惊叹的前端技术，其创新性的设计理念和强大的功能使其成为现代 Web 开发的领军者。通过引入虚拟 DOM 、组件化开发和单向数据流等概念， React 不仅提高了应用的性能和可维护性，还让开发者在构建复杂用户界面时拥有更高的灵活性和控制力。 JSX 语法的引入使 UI 代码更加直观和易读，而庞大而活跃的社区生态系统则为开发者提供了丰富的工具和支持。同时， React 的跨平台特性使其在移动开发领域也大放异彩，成为 React Native 的基石。 React 可以被视为一个跨时代的前端开发工具和框架。其引入了许多创新性的概念和技术，对前端开发的方式和效率产生了深远的影响","text":"什么是 React ？在2024年的今天，我们的浏览器仍然采用最基本的 html + CSS + JavaScript 构建页面，但是我们可以很明显的感觉到，编写原生三件套代码是比较复杂的。并且在 Web 项目规模庞大和设备多样性越发丰富的今天，代码的可维护性、开发效率、跨平台开发、性能等因素都会影响到我们对开发工具的选择。因此人们想到了一种方式，可不可以先编写一些简化的、高效率的代码，然后用他们生成 html + CSS + JavaScript 并运行在浏览器上。就像是我们不必编写汇编语言，写 C语言 即可构建可执行文件。就这样， React 诞生了 维基百科这样定义 React ：React 是一个前端 JavaScript 工具库，用于基于 UI 组件构建用户界面 当前常用的工具（库或框架）不止有 React ，比如 Vue、Angular 等都是常见的构建前端页面的工具 MDN 这样描述 React ：React 不是一个框架——它的应用甚至不局限于 Web 开发，它可以与其他库一起使用以渲染到特定环境。例如， React Native 可用于构建移动应用程序； React 360 可用于构建虚拟现实应用程序…… React 是一门令人惊叹的前端技术，其创新性的设计理念和强大的功能使其成为现代 Web 开发的领军者。通过引入虚拟 DOM 、组件化开发和单向数据流等概念， React 不仅提高了应用的性能和可维护性，还让开发者在构建复杂用户界面时拥有更高的灵活性和控制力。 JSX 语法的引入使 UI 代码更加直观和易读，而庞大而活跃的社区生态系统则为开发者提供了丰富的工具和支持。同时， React 的跨平台特性使其在移动开发领域也大放异彩，成为 React Native 的基石。 React 可以被视为一个跨时代的前端开发工具和框架。其引入了许多创新性的概念和技术，对前端开发的方式和效率产生了深远的影响 React 的前世今生诞生背景：React 由 Facebook 的工程师 Jordan Walke 于 2011 年创建。最初的目标是解决 Facebook 内部复杂应用的性能问题和开发效率问题 开源发布：React 在 2013 年 5 月正式开源发布。这一举动使得更多的开发者能够使用和贡献 React ，促进了它的快速发展 组件化开发：React采用了组件化的开发方式，将 UI 拆分为独立的组件，使得代码更加模块化、可维护。组件化开发成为React的核心理念之一，也被其他框架和库广泛采用 JSX 语法：React 引入了 JSX 语法，允许在 JavaScript 中编写类似 XML 的标记，使 UI 的描述更加直观。 JSX 在编译时会被转换为普通的 JavaScript 代码，使开发者的代码编写更为便捷 React Native：随着移动端应用的兴起， React 的影响力扩展到了移动开发领域。 React Native 使开发者能够使用 React 的思想和组件化开发方式来构建原生移动应用，实现了跨平台的目标 持续更新：React团队持续进行版本迭代和改进，引入新的特性和优化，以适应前端技术的不断发展和用户需求的变化 （上面随便看看就行，下面才是正文） 一、React ，启动！在某个你想要建立该项目的目录下，运行 React 官方提供的脚手架： 1npm create react-app learn-react --template typescript -y 这行命令表示在当前目录下创建一个新的 react 项目，项目名称为 learn-react ，使用 TypeScript 而不是 JavaScript 如果安装顺利，使用命令 cd learn-react 进入项目文件夹，输入 npm start 即可编译整个应用，随后应当就可以通过本地 3000 端口访问到 React 的欢迎界面了 为了更好地阅读本文档，推荐下载简化版 React 框架。其中仅保留了最基础、最必要的代码文件 下载简化版框架之前，我们希望你已经通过上述步骤成功初始化了一个新的 React 应用并能够在 3000 端口访问到欢迎界面。如果已经确认初始化成功，可以通过 该链接 下载压缩包，请在解压后使用压缩包内的 src 文件夹替换你的 React 应用的 src 文件夹，并再次使用 npm start 命令运行 React 应用 如果你现在能够在 3000 端口访问到一个写有 Hello, React! 字样的页面，则已经完成了配置 二、React 项目的结构 node_modules存放项目依赖的第三方库和工具 public包含不需要 webpack 处理的静态资源，如 HTML 文件、网页图标（favicon）等。其中 index.html 是主 HTML 文件，是 React 项目页面加载的入口文件 src包含 React 项目的源码，我们主要编写的就是这个文件夹的内容 通常里面还会包含 components 、 pages 、 styles 三个文件夹，分别存放了可复用的 React 组件、页面级的 React 组件、样式文件 App.tsx 是我们自定义的一个组件，通过 export default App; 导出，可以被其他文件引入 接下来重点讲 和 index.tsx index.tsxindex.tsx 是一个 React 项目中的入口文件，通常用于渲染主应用组件到 HTML 页面： 123456import React from &#x27;react&#x27;;import ReactDOM from &#x27;react-dom/client&#x27;;import App from &#x27;./App.tsx&#x27;;const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;) as HTMLElement);root.render(&lt;App /&gt;); 解释一下这个文件实现的功能 使用 import 语句导入 React 和 ReactDOM 库，用于创建和渲染 React 组件 使用 import 导入主应用组件 App 使用 ReactDOM.createRoot 方法创建一个 root 对象。这个对象代表了 React 渲染的根节点，对应于页面上的容器元素。再通过 document.getElementById(&#39;root&#39;) 方法获取到页面的根元素，之后使用 root.render 方法渲染主应用组件 &lt;App /&gt; 到根节点 实例化一个组件也是简单的，类似 HTML 语法，只要像 &lt;App /&gt; 一样用尖括号把组件名包裹起来就可以了 那我们 id 为 root 的根节点在哪里呢？我们打开 public 中的 index.html： 诶！根节点就在 index.html。而 React 项目页面加载的入口文件就是 index.html ，这也就解释了为什么页面中可以呈现出我们 return 的 h1 index.tsx 的作用就是搭建起传统 HTML 和 React TSX 之间的桥梁，让我们可以自由地使用 TSX 语法编写组件，而将这些组件转换到 HTML 的任务则交给了 React 框架 那又一个问题出现了： React 项目的 public 文件夹里的 index.html 并没有 link 到 src 下的 index.tsx ，那 index.tsx 是怎么 get 到 root 这个 id 的呢？ 这是因为 React DOM 在运行时会自动查找页面上具有特定 id 的元素，然后将组件渲染到该元素中。具体来说，React DOM 通常会在 index.html 中的 &lt;div id=&quot;root&quot;&gt;&lt;/div&gt; 元素处渲染应用。这个元素是在 index.html 中静态存在的，而不是通过 JavaScript 动态创建的。React 会将应用渲染到这个预定义的根元素上。说白了就是，这套逻辑已经在 React 的原码里写死了 三、JSX 和 JS 的区别JSX 是一种 JavaScript 的语法扩展，也可以说 JSX 是一种方便构建 UI 的语法糖，用于在 JavaScript 代码中描述 UI 结构 JSX 和原生 JavaScript 的最大差别就是引入了标签语法： 1const p = &lt;p&gt;Hello world!&lt;/p&gt;; 这类似于 HTML 标签的语法定义了一个对象，其等价于以下表达： 12345const p = React.createElement( &quot;p&quot;, undefined, &quot;Hello world!&quot;); 既然标签可以是变量，那它就可以被返回： 1234567import React from &#x27;react&#x27;;const App: React.FC = () =&gt; &#123; return &lt;h1&gt;Hello, React!&lt;/h1&gt;;&#125;;export default App; React.FC 是 React 中的一个泛型类型，用于定义函数组件（Function Components）。在使用 TypeScript 编写 React 组件时，可以使用 React.FC 来明确函数组件的类型我们注意 return &lt;h1&gt;Hello, React!&lt;/h1&gt;; 这行代码，它使得 App 这个函数返回了一个 h1 标签，这种写法我们称为声明式 UI 在 JSX 中，每个 JSX 表达式必须被包裹在一个父元素中。比如这样的代码就会报错： 12345678910import React from &#x27;react&#x27;;const App: React.FC = () =&gt; &#123; return ( &lt;h1&gt;Hello, React!&lt;/h1&gt; &lt;h1&gt;Hello, JSX!&lt;/h1&gt; );&#125;;export default App; 这是因为 JSX 实际上被转译成 JavaScript 代码，而 JavaScript 中每个表达式只能有一个根节点。 如果真的要返回两个 h1 ，可以考虑将他们放在一个 div 中： 123456789101112import React from &#x27;react&#x27;;const App: React.FC = () =&gt; &#123; return ( &lt;div&gt; &lt;h1&gt;Hello, React!&lt;/h1&gt; &lt;h1&gt;Hello, JSX!&lt;/h1&gt; &lt;/div&gt; );&#125;;export default App; 如果你不想使用额外的容器元素，你可以考虑使用 React Fragments。React Fragments（片段）是一种特殊的 React 组件，用于在不添加额外 DOM 元素的情况下包裹多个子元素。Fragments 提供了一种解决“JSX 表达式必须具有一个父元素”这一限制的方式。 使用 React Fragments 的语法可以是空标签 &lt;&gt;&lt;/&gt; 或 &lt;React.Fragment&gt;&lt;/React.Fragment&gt; ，通常使用空标签 123456789101112import React from &#x27;react&#x27;;const App: React.FC = () =&gt; &#123; return ( &lt;&gt; &lt;h1&gt;Hello, React!&lt;/h1&gt; &lt;h1&gt;Hello, JSX!&lt;/h1&gt; &lt;/&gt; );&#125;;export default App; 下一篇博客我们将会讲解 React 的核心概念——组件。在React中，组件是构建用户界面的基本单元，具有独立的状态和行为，能够将复杂的UI拆分为可管理的、可复用的模块。组件化开发使得代码结构更清晰、可维护性更强，同时提供了一种高效的方式来组织、测试和重用代码。通过组件，React支持了声明式UI的开发范式，使开发者能够专注于描述界面的外观和行为，而无需过多关注底层DOM操作，从而提高了开发效率、代码可读性，并促进了团队协作。","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://houyi2333.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"从 JavaScript 到 TypeScript","slug":"从JavaScript到TypeScript","date":"2024-01-21T09:16:23.000Z","updated":"2024-01-22T06:22:46.624Z","comments":true,"path":"2024/01/21/17-16-23/","permalink":"https://houyi2333.github.io/2024/01/21/17-16-23/","excerpt":"什么是TypeScript？简而言之，TypeScript 是 JavaScript 的超集，它继承了 JavaScript 所有的语法，并且可以编译为纯 JavaScript 。它的目的并不是创造一种全新语言，而是增强 JavaScript 的功能，使其更适合多人合作的企业级项目。 既然是超集，那么它超在哪里呢？ 我们知道， JavaScript 的变量是没有类型的，无论用 var, let, const 哪一个关键字，都无法指定变量的类型，因此我们称 JS 是一个“弱类型”的语言。例如下面的代码，在 JavaScript 中是完全合法的 123let a = 1;let str = &quot;34&quot;;let res = a + str; // res = &quot;134&quot; 这对我们来说是非常不好的，是反直觉的，正常人的思维应该是，一个数字和字符串怎么可能可以相加呢？这应该报错！ TypeScript 最大的特点就是引入了类型系统，这样就可以在编译为 JavaScript 代码之前由编译器进行类型检查。在这样的条件下，TypeScript 中的变量在声明的时候就可以指定类型，编译器在将 TypeScript 代码编译为 JavaScript 代码的时候会进行类型检查，若有不符合类型声明的情况则会报错： 12345const fun = (name: string): void =&gt; &#123; console.log(&quot;Hello, &quot; + name);&#125;fun(2); // Error! 上面的 fun 函数要求传入一个 string 类型的值，且返回类型为 void 但是我们调用的时候却传入了一个数字2，这显然是不符合函数参数要求的，因此 TypeScript 编译器会报错 TypeScript 有着静态类型检查，具有类型系统，可以在开发时捕获许多常见的错误。通过类型检查，可以在编码阶段就发现潜在的问题，减少运行时错误。因此我们更推荐使用 TypeScript 进行项目开发，而不是 JavaScript","text":"什么是TypeScript？简而言之，TypeScript 是 JavaScript 的超集，它继承了 JavaScript 所有的语法，并且可以编译为纯 JavaScript 。它的目的并不是创造一种全新语言，而是增强 JavaScript 的功能，使其更适合多人合作的企业级项目。 既然是超集，那么它超在哪里呢？ 我们知道， JavaScript 的变量是没有类型的，无论用 var, let, const 哪一个关键字，都无法指定变量的类型，因此我们称 JS 是一个“弱类型”的语言。例如下面的代码，在 JavaScript 中是完全合法的 123let a = 1;let str = &quot;34&quot;;let res = a + str; // res = &quot;134&quot; 这对我们来说是非常不好的，是反直觉的，正常人的思维应该是，一个数字和字符串怎么可能可以相加呢？这应该报错！ TypeScript 最大的特点就是引入了类型系统，这样就可以在编译为 JavaScript 代码之前由编译器进行类型检查。在这样的条件下，TypeScript 中的变量在声明的时候就可以指定类型，编译器在将 TypeScript 代码编译为 JavaScript 代码的时候会进行类型检查，若有不符合类型声明的情况则会报错： 12345const fun = (name: string): void =&gt; &#123; console.log(&quot;Hello, &quot; + name);&#125;fun(2); // Error! 上面的 fun 函数要求传入一个 string 类型的值，且返回类型为 void 但是我们调用的时候却传入了一个数字2，这显然是不符合函数参数要求的，因此 TypeScript 编译器会报错 TypeScript 有着静态类型检查，具有类型系统，可以在开发时捕获许多常见的错误。通过类型检查，可以在编码阶段就发现潜在的问题，减少运行时错误。因此我们更推荐使用 TypeScript 进行项目开发，而不是 JavaScript TypeScript，启动！ Node.js 提供了 npm 包管理器，通过npm install -g typescript 即可安装 TypeScript 。通过 tsc 命令即可将 TypeScript 代码编译为 JavaScript 代码。但是它并不支持直接运行编译后的代码，而 ts-node 正好填补了这一空缺，它封装了 TypeScript 的编译过程，使得 TypeScript 代码无需编译成 JavaScript，就能直接运行 TypeScript 代码。由于这是一个教学文档，本文先不使用 ts-node 我们在一个文件夹下启动命令行，输入 npm install -g typescript 安装 TypeScript ，之后输入 tsc --init即可在当前文件夹下初始化 TypeScript 项目。我们会发现当前文件夹下多了一个 tsconfig.json 文件，这是 TypeScript 项目的配置文件，它包含了编译器的配置选项，我们暂时先不动它 在当前文件夹下新建 index.ts 文件，并编写： 12let str: string = &quot;TypeScript&quot;;console.log(`Hello, $&#123;str&#125;!`); 之后在命令行输入 tsc index.ts，即可编译 index.ts ，同时编译生成的index.js 会被放在同一目录下 在命令行输入 node index.js ，如果成功输出了 Hello, TypeScript!，证明你的电脑已经成功安装 TypeScript 编译器 TypeScript 的变量类型TypeScript 的变量类型与C语言相比简单的多，仅有布尔类型( boolean )、数字类型( number )、字符串类型( string )、未定义类型( undefined )、空类型( null )、大数类型( bigint )、符号类型( symbol )、任意类型( any )、never类型( never ) 其中有必要细讲的是未定义与空，还有任意类型。大数和符号不常用，感兴趣可以自行Google 空类型未定义和空都表示空，但 null 表示这个元素存在，但是是空的； undefined 表示这个元素干脆就不存在。且 undefined 要比 null 常见的多 这两个类型的相同点是，他们都是只有一个值的数据类型， undefined 的值只有 undefined ， null 的值只有 null 我们先看一张比较经典的图片，该图来自 stackoverflow 的回答 非零值就像一个装有卫生纸卷的支架，并且管子上仍然有纸巾。 零值就像一个带有空卫生纸管的支架。 空值就像一个没有卫生纸管的支架。 未定义就像连支架都没有 对于一个未定义的变量，执行 typeof 操作符，那么就会返回 undefined 123let data;console.log(typeof(data)); // undefinedconsole.log(typeof(src)); // undefined 这里我们没有使用 === 来判断，因为对于尚未声明过的变量，我们只能执行使用typeof操作符检测其数据类型这个操作，使用其他的操作都会报错 还有使用对象中不存在的属性，也会返回 undefined ： 1234let obj = &#123; prop: &#x27;value&#x27;&#125;;console.log(obj.abcdefg); // undefined 从逻辑角度来看， null 值表示一个空对象指针，指示变量未指向任何对象，常在返回类型是对象，但没关联值的地方使用，就像下面： 12let $container = document.getElementById(&quot;container&quot;); // container是不存在的console.log($container); // null 如果一个变量已经定义，并且它的值为 null ，那么他的类型就是： 12let data = null;console.log(typeof(data)); // object 你会发现他的类型并不是 null， 而是一个对象。这并不奇怪。从逻辑角度来看， null 值表示一个空对象指针，它代表的其实就是一个空对象。 任意类型当你不知道该标记什么类型，或者你希望可以写任何类型时，可以谨慎使用 any，编译器将不会尝试对 any 类型的变量做任何的分析。 any 类型是目前 TypeScript 语言之中具有较大争议的一个设计，因为理论上我们可以将所有的变量声明为 any 从而绕过类型检查，这个时候 TypeScript 实际上退化为 JavaScript 但是考虑到目前 Web 前端项目会引用大量的第三方库，开发者很多时候无法完全把握某些变量的信息，所以 any 类型是必要的。不过我们需要注意其使用，对于能够给定类型的变量则尽量不标记为 any 1234let num: any = &quot;string&quot;;num = 2333; // OKnum = true; // OKnum = undefined; // OK never 类型TypeScript 支持一种特殊的类型，即 never 类型。这种类型常被用于标注函数返回值，代表这个函数永远不会终结或者会抛出异常： 123const neverEnd = (): never =&gt; &#123; while (true) &#123;&#125;&#125;; 这种类型的值永远不能被实例化，也即尝试声明和使用 never 类型的值将会总是出现错误，利用个特点，我们可以检测程序是否考虑了所有的情况，这被称为耗尽检查： 1234567891011121314151617type All = number | string | boolean;// switch 语句用法与 C/C++ 一致const handler = (value: All) =&gt; &#123; switch (typeof value) &#123; case &#x27;number&#x27;: // do something break; case &#x27;string&#x27;: // do something break; case &#x27;boolean&#x27;: // do something break; default: let exhaustiveCheck: never = value; &#125;&#125; 根据 never 的特点，default 分支的代码执行必然会产生错误，因此如果该 switch 语句未能穷尽 typeof value 的可能取值，使得代码落入 default 分支，导致 never 类型的变量被实例化，进而导致编译器报错 如果修改类型 All 为 number | string | boolean | undefined，编译器会告诉我们不能将类型“undefined”分配给类型“never”，这就是因为当 value === undefined 时，会尝试将 undefined 赋给 never 类型的变量。 这样，handler 函数就会因为没有耗尽所有可能而报错 类型标注声明变量时可以在变量后面标注类型，也可以根据初始值自动推断，但如果声明变量时不赋初始值，则必须添加类型标注，否则在使用时会报错（即自动推断该变量为 undefined 的类型，因此不能赋其他值）。 普通类型标注123let isDone: boolean = false;let Count: number = 100;let str: string = &quot;Hello, TypeScript!&quot;; 也就是在变量名字后面紧接着跟一个冒号，再加上类型就可以了 但需要注意的是 TypeScript 允许使用字面量作为类型标注，如： 12let one: 1 = 1;one = 2; // Error! 这里变量 one 的类型被限定为字面量 1 而不是所有的 number，这种标注的作用在下面会展示。 对象和数组的标注对象： 123456789let obj: &#123; name: string, age: number, address: string&#125; = &#123; name: &quot;Alice&quot;, age: 21, address: &quot;No. 2, Linggong Road, Ganjingzi District, Dalian City, Liaoning Province&quot;&#125;; 所有元素均相同的数组： 1234let learning_direction: string[] = [&#x27;Embedded&#x27;, &#x27;Web&#x27;, &#x27;Media&#x27;];learning_direction = &#x27;Web&#x27;; // Error! 不能将类型“string”分配给类型“string[]”learning_direction = [&#x27;Web&#x27;]; // Success 固定长度和类型的数组： 1let arr: [number, boolean] = [1, false]; 函数的标注123function sum(x: number, y: number): number &#123; return x + y;&#125; 上面的函数，函数名为 sum， 两个参数类型均为 number ，返回值也为 number 这里要注意的是，编译器会尝试推断函数返回值，但不会尝试从函数实现中推断参数类型，因此参数列表的类型标注是必不可少的。 也可以按照声明变量的方式： 123let sum = function (x: number, y: number): number &#123; return x + y;&#125; 这里 sum 作为一个变量，它的类型并非前文所提过的原始值，因此也是一个对象，它的构造函数是 function 如果使用箭头函数： 123456// 以下两种写法的结果相同const sum = (x: number, y: number) =&gt; x + y;const sum = (x: number, y: number) =&gt; &#123; return x + y;&#125;; 虽然我们函数参数有了类型的限制，但是实际上 TypeScript 在运行时并不会检查你的调用是否符合参数列表（尽管在编译器会尝试进行静态检查，但是如果你使用 any 或其他一些方法传入其他类型参数，仍然会继续运行） 在 JavaScript 中，甚至不会检查你函数调用的时候传入参数的个数，但是 TypeScript 会阻止传入个数错误的参数 在 TypeScript 中可以通过将参数标为可选或提供默认值来允许不同长度的传入参数： 1234567function sum(x: number, y: number = 1, z?: number): number &#123; // y的默认值是1，z为可选参数 return x + y + (z ?? 0); // 这里 y 不可能为空值，但 z 可能。如果函数调用没有给出z，那么z默认是0&#125;console.log(sum(1)); // =&gt; 1 + 1 + (undefined ?? 0) = 2console.log(sum(1, 0)); // =&gt; 1 + 0 + (undefined ?? 0) = 1console.log(sum(1, 2, 3)); // =&gt; 1 + 2 + (3 ?? 0) = 6 类型别名可以使用 type 关键词定义类型别名，在需要实现复杂的类型时非常有用： 123type numberOne = 1;let one: numberOne = 1;one = 2; // Error! 联合类型和类型收窄 TypeScript 可以将变量的类型声明为若干个类型之一，这称为联合类型 123let union: number | string = 7;union = &quot;Genshin Impact&quot;; // OKunion = 8; // OK 上面的 union 变量，既可以是 number 类型，也可以是 string 类型 联合类型最常用的地方是标注函数参数，这样就允许了函数接受多种类型的参数： 123456const addHello = (x:number | string): void =&gt; &#123; console.log(&quot;Hello&quot; + x);&#125;;addHello(1); // OKaddHello(&quot;Dalian&quot;); // OK 上文提到字面量可以作为类型标注，那么使用联合类型，就可以实现枚举行为： 123type oddNumber = 1 | 3 | 5 | 7 | 9;let a: oddNumber = 5; // OKlet b: oddNumber = 2; // Error! 这就是上面提到的复杂类型之一 对于“所有元素均相同的数组”的实例代码出现的错误，如果更改为下面的代码： 1234let learning_direction: string | string[] = [&#x27;Embedded&#x27;, &#x27;Web&#x27;, &#x27;Media&#x27;];learning_direction = &#x27;Web&#x27;; // Successlearning_direction = [&#x27;Web&#x27;]; // Success 这里我们声明 learning_direction 可能有两种类型，即 string 和 string[]，所以我们可以将其任意赋值为其中的一种，但这就导致我们在使用这一值时，不能精确判断上面包含的方法，例如我们尝试执行： 1learning_direction.match(/react/); // Error! 类型“string[]”上不存在属性“match” 这里编译器会报错，但如果我们的代码足以让编译器推断出来变量类型： 12345if (typeof learning_direction === &#x27;string&#x27;) &#123; console.log(learning_direcion.match(/react/));&#125; else &#123; //&#125; 如果能够进入 if 判断的第一个大括号的语句，那 learning_direction 就一定是 string 类型，编译器自己就能够明白，这么做是安全的，允许调用相应的方法，这种行为被称为类型收窄 类型断言这种语法只用在一种情况：你认为你比编译器还懂这个变量的类型 123let learning_direction: string | string[] = [&#x27;Embedded&#x27;, &#x27;Web&#x27;, &#x27;Media&#x27;];(learning_direction as unknown as string).match (/react/); 我们这里使用 as 关键字，告诉编译器 learning_direction 这个变量一定为 string 类型，不可能是 string[] 类型，这个时候编译器就会听你的，把他它当作 string 类型处理 但你不能断言一个变量为明显冲突的类型 比如上述代码，如果是 (learning_direction as string).match (/react/); ，那么就会报错，所以我们要先断言为 unknown 再断言为其他类型 TypeScript 的复杂类型泛型这类似于C++的模板 123456789101112131415161718192021222324252627282930313233343536373839//函数泛型function identity&lt;Type&gt;(arg: Type): Type &#123; return arg;&#125;//还是函数泛型const identity = &lt;Type&gt;(arg: Type): Type =&gt; arg;//类泛型class GenericNumber&lt;NumType&gt; &#123; zeroValue: NumType; add: (x: NumType, y: NumType) =&gt; NumType;&#125;//对象泛型interface Request&lt;ReqBody, ResBody&gt; &#123; request: ReqBody; response: ResBody;&#125;//别名泛型type MaybeArray&lt;Value&gt; = Value | Value[];//它们的实例化identity&lt;number&gt;(1);const num = new GenericNumber&lt;number&gt;();const req: Request&lt;&#123; action: string &#125;, &#123; result: string &#125;&gt; = &#123; request: &#123; action: &#x27;update system&#x27;, &#125;, response: &#123; result: &#x27;succeeded&#x27;, &#125;,&#125;;let nums: MaybeArray&lt;number&gt; = 0;nums = [0, 1, 2]; 可以为泛型添加限制和默认值，也可以由编译器推断泛型类型： 1234567891011function identity&lt;Type = number&gt;(arg: Type): Type &#123; return arg;&#125;identity(1);function identity&lt;Type extends &#123; data: string &#125;&gt;(arg: Type): string &#123; return arg.data;&#125;identity(&#123; data: &quot;str&quot; &#125;); typeof 和 keyof 关键字typeof 除了可以作为运算符获取变量类型以外，用作类型标注时，可以获取变量的具体类型（而非作为运算符时的有限种类）： 12345678const someObj = &#123; foo: 1, bar: &#x27;2&#x27;,&#125;;function f(arg: typeof someObj) &#123; // arg: &#123; foo: number; bar: string &#125; // do something&#125; keyof 可以获取类型的键的类型： 12345678const Obj = &#123; foo: 1, bar: &quot;2&quot;,&#125;;function f(arg: keyof typeof Obj) &#123; // arg: &#x27;foo&#x27; | &#x27;bar&#x27; // do something&#125; 三目运算符与C语言的三目运算符语法相同，但是在 TypeScript 中与泛型结合会更有用 12345678910111213type MessageOf&lt;T&gt; = T extends &#123; message: any &#125; ? T[&#x27;message&#x27;] : unknown;interface Email &#123; message: string;&#125;interface Dog &#123; bark(): void;&#125;type EmailMessageContents = MessageOf&lt;Email&gt;; // EmailMessageContents = stringtype DogMessageContents = MessageOf&lt;Dog&gt;; // DogMessageContents = unknown","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://houyi2333.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"现代前端开发基础","slug":"现代前端开发基础","date":"2024-01-20T04:33:21.000Z","updated":"2024-01-23T13:42:11.311Z","comments":true,"path":"2024/01/20/12-33-21/","permalink":"https://houyi2333.github.io/2024/01/20/12-33-21/","excerpt":"库和框架库库是一系列预先定义好的数据结构和函数或类的集合，程序员可以通过调用这些代码实现功能。简单来说就是库为我们提供了很多封装好的函数，看起来比较零散，但使用起来更灵活，只用取里面我们需要的某部分，再自己实现项目中其他部分得功能 库就类似于 C 语言中的头文件，比如 &lt;stdio.h&gt; 头文件提供了一系列常用的功能：printf()、scanf()、gets()、fopen() 等 在前端开发中，使用库可以简化开发流程，提高开发效率。例如，jQuery 提供了简化 DOM 操作的语法，减少了编写繁琐代码的需要。React 通过虚拟 DOM 和声明式 UI ，便于快速构建用户界面 如果需要在网页中使用 JavaScript 库，可以去网上下载库文件，放在网页的同一目录下，再到script标签中引入。或者不下载通过通过链接在&lt;script&gt;标签中引用该库即可： 12&lt;script src=&quot;https://cdn.staticfile.org/jquery/3.4.0/jquery.min.js&quot;&gt; &lt;/script&gt; 或者在代码中通过 require 或者 import 中引入库。在现代的前端开发中，通常推荐使用 import 来进行模块导入，特别是在使用现代 JavaScript 特性的项目中。这主要与现代 JavaScript的发展趋势和语言特性有关 import 是 ES6 新引入的关键字，支持按需导入，而不需要导入整个模块。同时require 的语法也比 import 更直观清晰，更符合现代变成风格 随着 JavaScript 生态的发展，越来越多的库和工具采用了 ES6 模块系统，使用 import 能够更好地与这些现代化的工具和库进行集成。","text":"库和框架库库是一系列预先定义好的数据结构和函数或类的集合，程序员可以通过调用这些代码实现功能。简单来说就是库为我们提供了很多封装好的函数，看起来比较零散，但使用起来更灵活，只用取里面我们需要的某部分，再自己实现项目中其他部分得功能 库就类似于 C 语言中的头文件，比如 &lt;stdio.h&gt; 头文件提供了一系列常用的功能：printf()、scanf()、gets()、fopen() 等 在前端开发中，使用库可以简化开发流程，提高开发效率。例如，jQuery 提供了简化 DOM 操作的语法，减少了编写繁琐代码的需要。React 通过虚拟 DOM 和声明式 UI ，便于快速构建用户界面 如果需要在网页中使用 JavaScript 库，可以去网上下载库文件，放在网页的同一目录下，再到script标签中引入。或者不下载通过通过链接在&lt;script&gt;标签中引用该库即可： 12&lt;script src=&quot;https://cdn.staticfile.org/jquery/3.4.0/jquery.min.js&quot;&gt; &lt;/script&gt; 或者在代码中通过 require 或者 import 中引入库。在现代的前端开发中，通常推荐使用 import 来进行模块导入，特别是在使用现代 JavaScript 特性的项目中。这主要与现代 JavaScript的发展趋势和语言特性有关 import 是 ES6 新引入的关键字，支持按需导入，而不需要导入整个模块。同时require 的语法也比 import 更直观清晰，更符合现代变成风格 随着 JavaScript 生态的发展，越来越多的库和工具采用了 ES6 模块系统，使用 import 能够更好地与这些现代化的工具和库进行集成。 框架框架是提供如何构建应用程序的意见的库，是一整套的工具，所有东西已经准备齐全了，可以按照它的规定就可以很简单的完成一些事情，但我们不能去改变它，只能按照要求使用，并且其他人拿到这套工具也是一样的，如 Vue、Angular 等等。 注意是一套而不是单个，比如 React 就是一个库，它本身只是一个前端渲染的库，纯粹地写 UI 组件，没有什么异步处理机制、模块化等，但是当它结合 Redux 和 React-router 的时候，就是一个框架了。 框架和库的联系紧密，都是为了提高我们的开发效率而存在，库的使用上会简单一些，更加灵活，但功能不全。而框架的功能很全面，但需要我们按规定去使用。也就是说库是一种工具，我提供了，你可以不用，即使你用了，也没影响你自己的代码结构，控制权在使用者手中。框架则是面向一个领域，提供了一套解决方案，如果你用我，就得按照我的方式办事，控制权在框架本身 区别库是一组已经实现的代码集合，提供了特定功能的函数和方法，开发者可以根据需要选择性地使用。库不控制应用程序的整体架构，而是为开发者提供了可调用的工具，以便在应用程序中实现特定功能 框架是一种提供了一整套解决方案的软件结构，它规定了整个应用程序的架构，定义了组织代码的方式，并提供了一系列工具和库，以便开发者可以在框架的基础上构建应用。框架通常有一个完整的生命周期，控制着应用程序的流程，开发者需要按照框架的规则来编写代码。 Node.js什么是 Node.jsJavaScript 是一个脚本语言，最初用来处理网页中的一些动态功能和一些用户行为。它一般运行于浏览器 但是这门语言后续不断更新，越来越多的人开始使用 JavaScript 。为了把它迁移到了服务端，但服务端上又不能跑浏览器，那我们就需要一种新的运行环境。就这样， Node.js 诞生了 安装 Node.js打开 Node.js 的官网链接 单击左侧的 LTS 版本进行下载 安装过程没什么好说的，一路下一步 之后我们就可以在终端中执行 node命令编译运行 .js 文件 使用命令 npm init 可以将当前文件夹初始化为一个 Node.js 项目 npmnpm（Node Package Manager）是一个用于管理和分享 JavaScript 包的工具，专门用于在服务器端和命令行工具中管理 JavaScript 包。它是随同 Node.js 安装的包管理工具，安装好node之后就会默认安装好npm了 JavaScript 包是一种封装了代码、资源的组织形式，能够方便共享、安装和管理代码。这些包可以包含 JavaScript 库、框架、工具或应用程序等。而 npm 就是管理这些包的工具（当然除了 npm 也有其他工具，比如 yarn、yum等） 我们可以在命令行中输入 npm -v 判断是否安装了 npm 如果成功获取到了版本号，说明 npm 已经成功的安装在您的电脑中了 npm 的常见命令npm install &lt;Module Name&gt; 使用 npm 命令本地安装模块 npm install -g &lt;Module Name&gt; 全局安装 两个的区别就是本地安装将安装包放在当前文件夹的 node_modules （如果没有则会自动生成）文件夹下，通过 import 来引入本地安装的包；全局安装包则通常放在 node 的安装目录下，可以直接在命令行里使用 npm uninstall &lt;Name&gt; 卸载模块 npm install -g npm@&lt;版本号&gt; 更新 npm npm publish 将自己的代码发布到 npm 上的全球开源库中 package.jsonpackage.json 是 Node.js 项目中的一个重要文件，它用于存储项目的配置信息。包含了项目的元数据（metadata），如项目名称、版本、作者、依赖库等信息。通过描述项目上下文、所需依赖和开发脚本，使项目具备可重复性和可移植性 12345678910111213141516171819202122232425262728293031323334353637&#123; &quot;name&quot;: &quot;learn_react&quot;, // 项目的名称 &quot;version&quot;: &quot;0.1.0&quot;, // 项目的版本号 &quot;private&quot;: true, // 用于指示是否将该项目发布到公共的包注册表的标志 &quot;dependencies&quot;: &#123; // 项目运行时所依赖的第三方包 &quot;@testing-library/jest-dom&quot;: &quot;^5.14.1&quot;, &quot;@testing-library/react&quot;: &quot;^13.0.0&quot;, &quot;@testing-library/user-event&quot;: &quot;^13.2.1&quot;, &quot;@types/jest&quot;: &quot;^27.0.1&quot;, &quot;@types/node&quot;: &quot;^16.7.13&quot;, &quot;@types/react&quot;: &quot;^18.0.0&quot;, &quot;@types/react-dom&quot;: &quot;^18.0.0&quot;, &quot;react&quot;: &quot;^18.2.0&quot;, &quot;react-dom&quot;: &quot;^18.2.0&quot;, &quot;react-scripts&quot;: &quot;5.0.1&quot;, &quot;typescript&quot;: &quot;^4.4.2&quot;, &quot;web-vitals&quot;: &quot;^2.1.0&quot; &#125;, &quot;scripts&quot;: &#123; // 定义一组自定义的命令脚本 &quot;start&quot;: &quot;react-scripts start&quot;, &quot;build&quot;: &quot;react-scripts build&quot;, &quot;test&quot;: &quot;react-scripts test&quot;, &quot;eject&quot;: &quot;react-scripts eject&quot; &#125;, &quot;browserslist&quot;: &#123; // 用于指定项目所支持的目标浏览器范围的配置文件，通常用于前端开发 &quot;production&quot;: [ &quot;&gt;0.2%&quot;, // 支持全球使用率超过0.2%的浏览器 &quot;not dead&quot;, // 排除已经被官方宣布为不再更新的浏览器 &quot;not op_mini all&quot; // 用于排除 Opera Mini 浏览器，Opera Mini 具有一些独特的行为或限制，需要在项目中进行特殊处理 ], &quot;development&quot;: [ &quot;last 1 chrome version&quot;, // 支持每个浏览器的最后一个版本 &quot;last 1 firefox version&quot;, &quot;last 1 safari version&quot; ] &#125;&#125; 如果项目有 package.json 文件，则通过命令 npm install 可以根据 &quot;dependencies&quot; 自动在 node_modules 文件夹中安装项目所需的所有包 模块化编程在计算机编程中，模块是指一个相对独立的程序文件或代码库，通常包含一组相关的函数、变量、类或其他可重用的代码构件，每个模块在内部执行某个功能。并向外部公开一定的接口以供其他模块使用。在编程语言中，通常有一些标准库或第三方库，这些库都是由多个模块组成的，可以在程序中被引用和使用。模块化主要是为了帮助程序员组织和管理大型代码库，可以将大型的程序有逻辑地拆分成一个个相对较小的部分，实现代码复用，让程序设计更加灵活，使其更易于维护和扩展。这是优点之一。并且还可以避免变量名和函数名命名冲突的问题以及解决不同模块之间的依赖关系。 就比如我要写一个贪吃蛇小游戏，普通代码编写就把所有逻辑像画布渲染，蛇的运动，食物的随机出现等都写到一个文件里，如果使用模块化概念，我们可以简单分块，分成主文件，蛇以及食物三个，然后在各个文件里实现相应的逻辑，这样假如你发现蛇的运动有问题，你就可以去蛇那个文件查找运动控制函数有没有问题，或者主文件中画布渲染有没有问题，这样感觉就更简单一点，目的更明确，更好地去维护。 import 和 export 是 ES6 引入的模块系统的关键字，用于在 JavaScript 中进行模块化编程。模块化使得代码更结构化、可维护，并允许开发者将代码分割为小的可重用部分 export 的使用：export 用于将变量、函数、类或其他声明导出为模块的公共接口，以便其他模块可以使用。有三种常见的 export 的方式 命名导出可以通过 export 关键字单独导出多个成员 12345// module.jsexport const myVariable = 42;export function myFunction() &#123; // ...&#125; 默认导出通过 export default 关键字导出一个默认成员，每个模块只能有一个默认导出 123// module.jsconst myVariable = 42;export default myVariable; 导出声明在声明时使用 export 关键字 12// module.jsexport const myVariable = 42; import 的使用：import 用于在一个模块中引入其他模块导出的成员，以便在当前模块中使用。有三种常见的 import 的方式： 命名导入导入其他模块中的命名导出 12// main.jsimport &#123; myVariable, myFunction &#125; from &#x27;./module&#x27;; 默认导入 导入其他模块中的默认导出 12// main.jsimport myVariable from &#x27;./module&#x27;; 导入所有导入其他模块的所有导出，形成一个命名空间对象 12// main.jsimport * as myModule from &#x27;./module&#x27;; 示例：123456789101112131415161718192021// module.jsexport const myVariable = 42;export function myFunction() &#123; // ...&#125;const internalVariable = &#x27;internal&#x27;;export default internalVariable;// main.jsimport &#123; myVariable, myFunction &#125; from &#x27;./module&#x27;;console.log(myVariable); // 42myFunction();import internalVariable from &#x27;./module&#x27;;console.log(internalVariable); // &#x27;internal&#x27;import * as myModule from &#x27;./module&#x27;;console.log(myModule.myVariable); // 42 打包打包是指将多个模块（ JavaScript、CSS、图片等）打包成为一个文件，这有助于代码管理、发布和使用。在前端开发中，通常需要使用打包工具将代码打包成浏览器可识别的格式，并优化加载速度和性能。 为什么前端需要打包？以前的前端开发存在三个大问题：没有模块化、第三方包的引入繁琐困难、代码以明文形式展示出来 我们利用打包工具就可以实现：支持模块化、自动打包第三方包、代码混淆，使得其他人无法阅读 下面介绍两个常使用的与打包有关的工具 BabelBabel 是一个 JavaScript 编译器，它能够将 ECMAScript 2015+ 的新特性转换为向后兼容的 JavaScript 代码，例如将 ES6 的箭头函数转换为普通函数、将模板字符串转换为常规字符串等等，使得我们可以在现代浏览器中使用最新的 JavaScript 特性，从而解决浏览器兼容性问题 执行 npm install -g babel-cli 安装 Babel 在项目根目录创建 .babelrc 文件，这是 Babel 的配置文件，并编写： 1234&#123; &quot;presets&quot;: [&quot;es2015&quot;], &quot;plugins&quot;: []&#125; 执行 npm install babel-preset-es2015 安装转码器，就是从源码转到老版本的代码中间的语法映射表 在根目录创建 src 文件夹，新建 index.js 并编写如下代码 1234// ./src/index.jslet [a, b, c] = [1, 2, 3];[a, b, c] = [b, c, a + 1];console.log(a, b, c) 这里用到了 ES6 的新特性解构赋值，执行 babel src -d dist Babel 就能够将它转换为旧的 ES2015 代码： 123456789101112// ./dist/index.js&quot;use strict&quot;;var a = 1, b = 2, c = 3;var _ref = [b, c, a + 1];a = _ref[0];b = _ref[1];c = _ref[2];console.log(a, b, c); WebpackWebpack 是一个模块打包工具，它可以将多个模块打包成一个或多个 JavaScript 文件，而这些 JavaScript 文件可以被浏览器正确加载执行。Webpack 可以处理各种类型的资源文件，如 JS、CSS、图片等，并提供了各种插件和 loader 用于对不同类型的资源进行处理和优化，同时还支持热更新功能，方便开发人员进行调试和开发 Webpack 会隐藏源码的细节，把多个 JavaScript 合并成一个 JavaScript，提高浏览器的访问速度，使源码更加安全 执行 npm install -g webpack webpack-cli 安装 Webpack 修改 src 下的 index.js： 12345// ./src/index.jslet [a, b, c] = [1, 2, 3];[a, b, c] = [b, c, a + 1];let arr = [a, b, c];export default arr; 在 src 下新建 main.js： 123// ./src/main.jsimport arr from &quot;./index.js&quot;;console.log(arr); 在根目录下定义一个 webpack.config.js 文件配置打包规则： 12345678910111213141516//导入path模块,nodejs的内置模块const path = require(&#x27;path&#x27;);//定义JS打包的规则module.exports = &#123; //指定构建的模式 mode: &#x27;development&#x27;, //入口函数从哪里开始进行编译打包 entry: &#x27;./src/main.js&#x27;, //编译成功以后要把内容输出到那里去 output: &#123; //定义输出的指定的目录__dirname 当前项目根目录，将生成一个dist文件夹 path: path.resolve(__dirname, &#x27;./dist&#x27;), //合并的js文件存储在dist/bundle.js文件中 filename: &#x27;bundle.js&#x27;, &#125;,&#125;; 终端执行 webpack 即可在 dist 文件夹中看到生成的 bundle.js，这就是合并后的 JavaScript 代码 通常在前端项目中，我们会将 Babel 和 Webpack 结合使用，使用 Babel 将最新版本的语法转换成向后兼容的代码，再由 Webpack 将这些代码打包并优化，最终生成浏览器可以解析的文件。","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://houyi2333.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[]},{"title":"1_什么是线性、什么是线性代数","slug":"线性代数_1_什么是线性、什么是线性代数","date":"2024-01-09T06:54:42.000Z","updated":"2024-01-22T06:23:31.178Z","comments":true,"path":"2024/01/09/14-54-42/","permalink":"https://houyi2333.github.io/2024/01/09/14-54-42/","excerpt":"线性代数作为大学里最重要的数学基础课之一，是大批学生的噩梦。相较而言，高数虽然内容繁杂，各种奇技淫巧频频出现，但由于高中课程中对导数等概念和相应工具的启蒙，且涉及微积分基本思想的数学故事也不少，加上近年来不少民科对微积分的攻击也帮助了一些简单微积分知识的普及，因而理工科的高数类课程反而不会让人觉得难以理解。 线性代数则不然，它往往让不少人从翻开书的第一页起一直懵逼到期末，讲的都是些什么玩意儿？ 最后迫不得已，一夜刷尽往年卷，匆匆应对期末考，从此相见不相识。 总的来说，教材的大致思路是先以某种方式定义矩阵，然后引入行列式，立马就开始计算。先对矩阵各种算——左乘右乘左右乘、求逆求秩求幂方，接着就开始了迷之特征值和向量空间，还有相似对角和相合，画风相当凌乱，根本不知道线性代数到底是什么，反正就是求和算。 这门课我也上完一年多了，最近也用到了很多线代中的知识，越发体会到这门课的重要性，于是准备把他重新捡起来，一边学一边讲解自己对线代的理解。","text":"线性代数作为大学里最重要的数学基础课之一，是大批学生的噩梦。相较而言，高数虽然内容繁杂，各种奇技淫巧频频出现，但由于高中课程中对导数等概念和相应工具的启蒙，且涉及微积分基本思想的数学故事也不少，加上近年来不少民科对微积分的攻击也帮助了一些简单微积分知识的普及，因而理工科的高数类课程反而不会让人觉得难以理解。 线性代数则不然，它往往让不少人从翻开书的第一页起一直懵逼到期末，讲的都是些什么玩意儿？ 最后迫不得已，一夜刷尽往年卷，匆匆应对期末考，从此相见不相识。 总的来说，教材的大致思路是先以某种方式定义矩阵，然后引入行列式，立马就开始计算。先对矩阵各种算——左乘右乘左右乘、求逆求秩求幂方，接着就开始了迷之特征值和向量空间，还有相似对角和相合，画风相当凌乱，根本不知道线性代数到底是什么，反正就是求和算。 这门课我也上完一年多了，最近也用到了很多线代中的知识，越发体会到这门课的重要性，于是准备把他重新捡起来，一边学一边讲解自己对线代的理解。 以下是正文： 这是《线性代数》这一章的第一篇文档，本篇不会讲线代的具体内容，仅会对线性代数进行一个介绍 什么是线性？我们考虑这样一个初中问题 求方程组\\left\\{ \\begin{array}{l} 2x-y=0\\\\ -x+2y=3\\\\ \\end{array} \\right.的解我们先抛开代数消元不谈，从几何上我们可以这么理解这个问题 求直线2x-y=0和直线-x+2y=3的交点的坐标 显然交点的坐标为$(1,2)$，所以方程组的解为$x=1, y=2$ 那么我们还知道，这个方程组叫做线性方程组，为什么呢？因为这个方程组的所有方程都是线性方程。什么是线性方程呢？我们把形如$a_1x_1+a_2x_2+\\cdots+a_nx_n=b$的方程叫做线性方程，因为他表示了n维空间内的一个……，我也不知道，我只知道二元一次方程就表示了二维平面内的一条直线，三元一次方程就表示了三维空间内的一个平面。反正我无法想象三维以上的空间。 线性方程组是由一个或多个包含相同变量的未知数的线性方程组成的，其一般形式为： \\left\\{ \\begin{array}{l} a_{11}x_1+a_{12}x_2+\\cdots +a_{1n}x_n=b_1\\\\ a_{21}x_1+a_{22}x_2+\\cdots +a_{2n}x_n=b_2\\\\ \\vdots\\\\ a_{m1}x_1+a_{m2}x_2+\\cdots +a_{mn}x_n=b_m\\\\ \\end{array} \\right.这是m个n元一次方程，表示了n维空间内的一个……，嗯，就是那个…… 现在我们再回到上面那个初中问题，如果把这个方程组竖着看会怎么样 已知\\vec{a}=\\left( 2,-1 \\right) ，\\vec{b}=\\left( -1,2 \\right) ，\\vec{c}=\\left( 0,3 \\right)，求实数x、y，使得x\\vec{a}+y\\vec{b}=\\vec{c}它变成了一个平面二维向量的组合问题，对$\\vec{a}$和$\\vec{b}$进行一个线性组合，使其能够得到$\\vec{c}$。什么是线性组合？它的定义是这样的 对于若干个n维向量：\\vec{a_1}, \\vec{a_2}, \\cdots, \\vec{a_m}\\\\ 对每个向量都乘上一个系数后相加：k_1\\vec{a_1}+k_2\\vec{a_2}+\\cdots+\\vec{a_m}k_m=\\vec{b}\\\\ 我们称\\vec{b}是这若干个n维向量的一个线性组合，也叫做线性表示对于上面的初中问题，让x取1，y取2就可以成功组合出来$(0, 3)$这个向量 现在我们思考另一个问题，所有的线性组合是什么？这种问题在这门课中会频繁出现。选取所有的x和y，所有的组合，结果是你会得到任意的二维向量，也就是对这两个向量进行不同的线性组合可以得到所有平面向量，这是我们高中学过的平面向量基本定理。这种线性组合的思想，是线性代数这门课的基础 接下来我们考虑三个方程三个未知数的方程组 求方程组\\left\\{ \\begin{array}{l} 2x-y=0\\\\ -x+2y-z=-1\\\\ -3y+4z=4\\\\ \\end{array} \\right.的解我们先把这个方程横着看，这是三维空间中的三个平面相交，求交点的坐标 如果把这个方程竖着看，那就是三维空间的三个向量的线性组合，使其能够组合出来等号右边的向量 现在我们思考另一个问题，所有的线性组合是什么？这是我们高中学过的空间向量基本定理，对于三个不共面的三维向量，其线性组合可以覆盖到整个三维空间。如果有两个向量位于同一个平面，那这两个向量中的一个将对向量组毫无贡献，这样的线性组合就只能覆盖到一个二维平面 那大家是否能想象出来四维空间中4个向量的组合，n维空间中n个向量的组合？显然，我们想象不出来。但在学完线性代数这门课以后，我们就会意识到，这n个向量有机会覆盖到整个n维空间。这很难直观的想象出来，我们也可以说这是某种平面。如果这n个向量中有两个向量是“共面”的，那么这n个向量就只能覆盖到n维空间中的某n-1维平面，最后的求解也只能在这n-1维平面上展开 线性代数是数学的一个分支，它的研究对象是向量，向量空间（或称线性空间），线性变换和有限维的线性方程组。这些概念和方法在数学、物理学、工程学、计算机等领域中都有广泛的应用。例如，在数学中，线性代数被广泛地应用于抽象代数和泛函分析中；在计算机领域中，线性代数被广泛地应用于计算机图形学、密码学、计算机视觉等方面","categories":[{"name":"线性代数","slug":"线性代数","permalink":"https://houyi2333.github.io/categories/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}],"tags":[]},{"title":"唉，计组","slug":"唉，计组","date":"2024-01-07T09:04:19.000Z","updated":"2024-01-22T11:53:31.849Z","comments":true,"path":"2024/01/07/17-04-19/","permalink":"https://houyi2333.github.io/2024/01/07/17-04-19/","excerpt":"今天是个特殊的日子：赖晓晨的计组出分了 好消息是分数还不错，在期末考试几乎没有会的题的情况下竟然拿到了80分，这说明赖晓晨在中等成绩段上给分还是不错的 听说去年最高分也只有88分，可能确实是在他手上很难拿高分吧","text":"今天是个特殊的日子：赖晓晨的计组出分了 好消息是分数还不错，在期末考试几乎没有会的题的情况下竟然拿到了80分，这说明赖晓晨在中等成绩段上给分还是不错的 听说去年最高分也只有88分，可能确实是在他手上很难拿高分吧 以下是正文： 首先恭喜同学成功的选上了赖晓晨老师的计算机组织与结构这门课 赖晓晨非常喜欢华为这个企业，上课会穿插极其多的华为的内容，期末考试也会涉及一些华为的内容，尤其是华为的鲲鹏处理器 赖晓晨老师上课的流程是，先扫码进雨课堂，课中会时不时在雨课堂发送测试题，并且每道题只有 30-60s 的时间来作答，如果翘课是很难通过别人提醒来及时作答的。同时，课上还会提问坐在后排的学生，如果没答上来，还会要求该学生坐到第一排。后来你会发现，教室里只有前5排有学生，后面一个都没有。同时，上课抢答的同学会记名，加平时分。同时，还会有翻转课堂，也就是学生讲课，自愿报名，报名的加平时分。同时，成绩构成也很复杂，各种形式五花八门，给大家看一下成绩构成 课后作业包括两部分，一部分是课本课后习题，会挑一些做，这个没什么问题，量也不多，与其他老师都一样。但是其他老师的平时成绩也就是这些课后习题了，而赖晓晨老师为了让学生全面发展，课后作业又新增了一项——代码作业 代码作业我这一届是有5个，如下图： 这个代码作业是线上提交C语言代码，但是这个代码的难度。。。反正我写不出来，并且ChatGPT也写不出来。作业的1003，我的代码通过了课本所有的例题，但是就是通不过他给的样例，最后喜提75分 同时，这个作业的代码会进行查重，如果你跟另一个同学的代码相似度过高，两个人本次作业会被直接判为0分。 同时，赖晓晨老师还设置了课内实验和微认证这两个部分 课内实验是什么呢，是赖晓晨老师亲手写的122页PDF，这个PDF教给了你如何租用华为鲲鹏920服务器，如何使用open Euler操作系统，如何编写ARMV8汇编程序，如何对汇编代码进行优化等等内容，并且还有每一个实验都紧跟着一个思考题，每一个实验不做思考题大概耗时1.5h。但是如果考虑到用电脑时诸如水群和看视频等其他操作，可能需要一晚上甚至更多时间才能做完一个实验。总共有5个实验需要做。 这个实验对于没有服务器租用经验和Linux系统使用经验的同学来说，我个人认为还是有挑战性的，open Euler是一个没有GUI的操作系统，仅能使用shell命令和vim编辑器进行操作 接下来讲微认证的5分 这个微认证的内容是华为鲲鹏处理器知识，有很多的课可以选，只要完成必做的一个+任选一个，共完成两个，就可以拿到这五分 这个微认证，每个课都是需要花费一张代金券的，代金券一个周能且仅能领一张，且限量500张，如果被抢没了，那这个周你想做也做不了了 当然，上述还没有考虑到大作业，当然大作业是选做的，也不知道做大作业是更容易及格还是更不容易及格 大作业的要求是，根据那122页PDF给出的实验，自己创新性的提出新的实验，实验内容要求与鲲鹏处理器技术的内容高度相关，实验文档的结构也要与实验手册一致，包括实验目的、实验设备、实验原理、实验任务操作指导以及思考题。由于我们并没有深入学习过鲲鹏920处理器，也不了解ARMV8架构和Linux操作系统，也不了解处理器内部结构，个人认为想要设计这个实验还是很难的，虽然我当年选择了做大作业，自己设计了一个实验） 大作业也不像其他老师一样交上去就完事了，需要三个人一起组队完成，要开题答辩，最终答辩，开题答辩还需要刷人，最终答辩如果不理想也要被刷掉。被刷掉了成绩构成就要回归第一种方案，也就是没有大作业，所以即使做了大作业，赖晓晨老师也不一定会让允许你的大作业计入期末成绩，可能会前功尽弃。 本人对赖晓晨老师的评价是，讲课极其认真，如果认真完成每一个作业，真的可以学到很多在其他老师课堂上学不到的东西，但是从成绩的角度讲，确实不容易拿到很高的分数。并且选他的课事情会极其极其极其的多，想摆烂求及格的同学千万不要选，会忙的你痛不欲生","categories":[{"name":"学习指南","slug":"学习指南","permalink":"https://houyi2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"}],"tags":[]},{"title":"具体数学笔记","slug":"具体数学笔记","date":"2024-01-04T10:38:27.000Z","updated":"2024-01-22T11:48:36.066Z","comments":true,"path":"2024/01/04/18-38-27/","permalink":"https://houyi2333.github.io/2024/01/04/18-38-27/","excerpt":"","text":"这门课在大工只有软院开，并且极其的抽象，虽然他叫具体数学 这门课的虽然很抽象，但是考试很简单，全部源自 PPT 和作业题，几乎连数都不变 这里在知识点上进行了一下总结（其实就是把 PPT 用人话说了一遍），建议先看会知识点，再看 PPT 的题，再看作业题 下载链接：具体数学笔记","categories":[{"name":"具体数学","slug":"具体数学","permalink":"https://houyi2333.github.io/categories/%E5%85%B7%E4%BD%93%E6%95%B0%E5%AD%A6/"}],"tags":[]},{"title":"VSCode自动格式化.c and .cpp文件并开启自动保存","slug":"vscode自动格式化-c-and-cpp文件并开启自动保存","date":"2023-10-06T05:11:21.000Z","updated":"2024-01-27T10:54:48.175Z","comments":true,"path":"2023/10/06/13-11-21/","permalink":"https://houyi2333.github.io/2023/10/06/13-11-21/","excerpt":"打开 VSCode 的设置，搜索 Format ，将搜索到的选项设置成如下格式，这样就打开了自动格式化","text":"打开 VSCode 的设置，搜索 Format ，将搜索到的选项设置成如下格式，这样就打开了自动格式化 在设置中搜索 Auto Save ，将 Files: Auto Save 改为 onFocusChange，这样就开启了自动保存 还有一个让强迫症患者很头大的问题：大括号是换行还是不换行？ 在设置中搜索 C_Cpp.Clang_format_style ，填入 &#123;BasedOnStyle: Chromium, IndentWidth: 4&#125; 这样大括号就不会换行","categories":[{"name":"VSCode","slug":"VSCode","permalink":"https://houyi2333.github.io/categories/VSCode/"}],"tags":[]},{"title":"大连理工大学软件学院新生学习指南","slug":"Dalian University of Technology Software School Freshman Study Guide","date":"2023-09-22T12:57:01.000Z","updated":"2024-01-22T06:29:05.767Z","comments":true,"path":"2023/09/22/20-57-01/","permalink":"https://houyi2333.github.io/2023/09/22/20-57-01/","excerpt":"大一上学期课程简介以及成绩计算相关软件学院大一上学期的课程有：大学生心理健康教育（2 学分）、大学英语 1（2 学分）、健康教育（0.5 学分）、计算机系统实践（1 学分）、体育-基础 1（0.5 学分）、信息技术导论（1 学分）、思想道德与法治（2.5 学分）、程序设计基础与 C 语言程序设计（4 学分）、工科数学分析基础 1（5 学分）、军训（2 学分） （大学的课程都有简称，以上课程简称依次为：心理健康，大英 1，健康教育，计算机系统实践、体育、导论课、思修，思政、C 语言、工数 1，高数 1，微积分 1，军训） 其中计入保研的有：大英 1、计算机系统实践、导论、思政、C 语言、工数 1、军训 大学的排名是根据均分排的，均分由平均成绩、单项奖学金、竞赛、论文等组成，平均成绩的计算公式是： \\text{假设课程}n\\text{的分数为}M_n\\text{，学分为}N_n \\text{那么你的平均成绩为}\\frac{\\sum_{i=1}^n{M_i\\times N_i}}{\\sum_{j=1}^n{N_j}}","text":"大一上学期课程简介以及成绩计算相关软件学院大一上学期的课程有：大学生心理健康教育（2 学分）、大学英语 1（2 学分）、健康教育（0.5 学分）、计算机系统实践（1 学分）、体育-基础 1（0.5 学分）、信息技术导论（1 学分）、思想道德与法治（2.5 学分）、程序设计基础与 C 语言程序设计（4 学分）、工科数学分析基础 1（5 学分）、军训（2 学分） （大学的课程都有简称，以上课程简称依次为：心理健康，大英 1，健康教育，计算机系统实践、体育、导论课、思修，思政、C 语言、工数 1，高数 1，微积分 1，军训） 其中计入保研的有：大英 1、计算机系统实践、导论、思政、C 语言、工数 1、军训 大学的排名是根据均分排的，均分由平均成绩、单项奖学金、竞赛、论文等组成，平均成绩的计算公式是： \\text{假设课程}n\\text{的分数为}M_n\\text{，学分为}N_n \\text{那么你的平均成绩为}\\frac{\\sum_{i=1}^n{M_i\\times N_i}}{\\sum_{j=1}^n{N_j}} 注：以下评分标准与授课内容仅适用于22级，其他年级若有出入属于正常情况 这些课是学什么的，以及容不容易挂科心理健康心理健康就是字面意思，会讲大学生如何才能保持一个正常的心理状态，有不正常的心理状态会怎么样。目前没有正常人挂过科 大英 1巨厚的课本，老师会讲里面的课文，讲里面的单词和句子，还有阅读理解。目前没有正常人挂过科 健康教育会讲常见疾病，得病了后如何自我诊断，如何正确就医。虽然课程简单，但是普遍低分且有部分人挂科 计算机系统实践教装机、装系统，上课跟着实操，下课后交报告。目前没有正常人挂过科 体育体育学什么要看你选的什么课，由于我不可能上过所有体育课，无法下结论是否容易挂科 信息技术导论每节课都会请一个巨佬来作报告，讲前沿知识，然后课下写论文交作业。目前没有正常人挂过科 思想道德与法治类似于高中政治课，凭借朴素的爱国情怀就可以及格，你要是挂科了建议出门左转去大连市公安局经济技术开发区分局自首 C 语言字面意思就学 C 语言，有挂科的，但是不多，不容易挂（==注意，软件学院 C 语言不是在电脑上考试，是纸质试卷手写代码，禁止使用任何电子设备==） 工科数学分析基础 1跟高等数学学的几乎一样，是大一最容易挂科的课 军训只要别跟教官和导员打起来就不会挂科 计入保研的课怎么学/怎么考试大英 1平时会有测试，测试内容以及答案我都放在 NAOSI 的 GitHub 仓库了，为了高分可以提前把题直接背下来。期末考试前会有口语考试，形式是老师面前摆了 15 张卡片，一张卡片有一段话，这些段落都是平时学的课文里的。先把这段话读给老师听，然后老师会根据内容提问问题，问题可能是与课文内容相关的，要求对课文很熟悉，也有可能是开放性问题，比如我当时的问题就是平时会怎么做计划，考察口语能力。期末考试的形式是听力+阅读+单词，单词就是平时测试的，题目都给你们了背下来就行了，听力和阅读都是课外的，跟高中一样 计算机系统实践好好上课动手多操作一下，不要学计算机的对计算机一窍不通。不要像你们某学长一样，学计算机的不会装系统，不会加固态，甚至不会解压 rar。成绩是根据课下写的报告给的，建议里面图多一点，文字多水一点。（反正老师不管你怎么写的，你可以百度甚至跟历届学长要啊） 信息技术导论好好水论文字数，好好调整好论文格式就行，给的分数相差不大 思想道德与法治思政想要考高分还是要多背一背课本的，期末考的题全部是选择题，可以参考 NAOSI 仓库里的题库。不过本人思想觉悟不够高，思政学的并不好，不能给学弟提一些有效的建议 C语言C 语言是软件工程课程的基础，这门课虽然教的极其老套，考试极其死板，但是如果学的不好，也很打击一个软件工程学生的自信心，会自身怀疑是否适合学软件工程这个专业。作为计算机专业的科班生，建议不要仅仅局限于课堂上老师教的内容，要以 C 语言为中心，自学其他内容。比如老师上课不会讲到的文件、算法设计，或者开发方面的。如果仅仅应付考试，多看老师发的 PPT，多看老师上课带着写的程序，学不会的去 b 站自己搜视频，或者查阅相关文档 工科数学分析基础 1工数 1 是从成绩上讲整个大一最最最最重要的课，与高中数学内容相关性比较高。工数 1 的成绩组成比较复杂，由作业+过程考核+MOOC 平台+期末考试组成，期末考试占 40%，平时占 60%。作业就是老师布置的作业，认真完成按时上交即可。过程考核一共有 3 次，时间听老师安排，一般是每一章讲完后的下周五，一次过程考核计入期末的 10 分，三次共 30 分，非常重要。过程考核内容为选择题+判断题，只考一章的内容，算是小型期中考试。并且过程考核的题目难度要大于期末考试，还会出一些比较恶心的卡概念的题，但考试的题目是从超级大的题库里抽的，题目难度与运气有关。过程考核的时间不是同一个时间，如果你是下午考的，可以利用自己的人际关系问一下上午都考了些什么，脸好的话会遇到原题。MOOC 平台就是线上完成作业，还有同学间互评打分，非常好得分，就是白送你的，但是总有人会忘记写 MOOC，或者写完了忘记互评，这些都会影响分数。期末考试由选择题和大题组成，比高中数学还老套，都是固定题型，想考高分平时就要刷题刷题还是刷题，刷考研题刷竞赛题，期末经常会从历年的考研或竞赛中拿几道改编一下。NAOSI 仓库里有个文件叫“每天起床头件事，先背一遍展开式”，是工数 1 和工数 2（这门课大一下要学）的复习提纲，有需要的自取 军训不知道怎么得高分 后记（改编自 20 级某 m 姓学长）无论成绩如何，一名软件工程专业的学生都应该在本科阶段掌握以下技能： 自学 规范代码格式 熟练使用 IDE（ VSCode 严格来说不属于 IDE 但依然是宇宙第一） 阅读 API 阅读文档 数据结构与算法 英文读写 版本控制工具（Git）和开源仓库（GitHub/Gitee）的使用 撰写 LaTeX/Markdown 文档 答辩 （字面意思） NAOSI 的 GitHub 仓库链接：https://github.com/NAOSI-DLUT/DLUT_SE_Courses 这个仓库是干什么的呢，里面有： 学长学姐亲传的资料 你寻找很久的电子参考书 前人细心雕琢出的大作业 历年真题 上完一门课才恍然领悟的技巧 2023.10.9 补充：上午看见某学长在某个群里发表言论称，考前一个月突击一下，足够考门门 90 拿学习奖学金了，对于这个言论我的意见是，你们可以自己试试看，反正我做不到","categories":[{"name":"学习指南","slug":"学习指南","permalink":"https://houyi2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"}],"tags":[]},{"title":"如何使用 VSCode 编译运行 .c and .cpp 文件","slug":"vscode-c-and-cpp","date":"2023-09-21T15:05:53.000Z","updated":"2024-01-27T10:55:14.585Z","comments":true,"path":"2023/09/21/23-05-53/","permalink":"https://houyi2333.github.io/2023/09/21/23-05-53/","excerpt":"首先先介绍一下 VSCode 是个什么东西 VSCode 是一款轻量级的代码编辑器，可以通过安装各种各样不同扩展的方式来实现开发者所需要的功能。 代码编辑器事实上我们可以看成是一个记事本（没错，就是你按下 Win+R 输入 notepad 回车之后的那个记事本），其最基本的功能是文档编辑。不过之所以将其称为是代码编辑器，是因为它虽然继承自一般的文档编辑器，又具备了一些一般的文档编辑器所不具备的功能。具体来说，例如自动语法高亮，自动补全，甚至是自动代码重构等等。集成开发环境（IDE）是一种用于构建应用程序的软件，可将常用的开发人员工具合并到单个图形用户界面（GUI）中。具体来说，我们只需要简单的点击按钮，可能就可以完成程序的编译、链接、运行、调试等等工作。而这些工作在最初都是需要人手工在命令行中完成的。我们在《程序设计基础与C程序设计》课程中最初使用的 Dev-C++ 便是一个集成开发环境。我们今天要介绍的 VSCode 是一款轻量级的代码编辑器。如果没有各种扩展插件的支持的话，可能我们只能把它称作是大号的记事本，而正是因为社区中各种各样的扩展，VSCode 才得以展现其强大。","text":"首先先介绍一下 VSCode 是个什么东西 VSCode 是一款轻量级的代码编辑器，可以通过安装各种各样不同扩展的方式来实现开发者所需要的功能。 代码编辑器事实上我们可以看成是一个记事本（没错，就是你按下 Win+R 输入 notepad 回车之后的那个记事本），其最基本的功能是文档编辑。不过之所以将其称为是代码编辑器，是因为它虽然继承自一般的文档编辑器，又具备了一些一般的文档编辑器所不具备的功能。具体来说，例如自动语法高亮，自动补全，甚至是自动代码重构等等。集成开发环境（IDE）是一种用于构建应用程序的软件，可将常用的开发人员工具合并到单个图形用户界面（GUI）中。具体来说，我们只需要简单的点击按钮，可能就可以完成程序的编译、链接、运行、调试等等工作。而这些工作在最初都是需要人手工在命令行中完成的。我们在《程序设计基础与C程序设计》课程中最初使用的 Dev-C++ 便是一个集成开发环境。我们今天要介绍的 VSCode 是一款轻量级的代码编辑器。如果没有各种扩展插件的支持的话，可能我们只能把它称作是大号的记事本，而正是因为社区中各种各样的扩展，VSCode 才得以展现其强大。 安装VSCode让我们打开 VSCode 官网：Visual Studio Code - Code Editing. Redefined 点击红框里的 Download for Windows，之后浏览器就会自动下载 选择我同意此协议 五个复选框全部都打勾 点击安装 这样我们就能成功打开 VSCode 汉化VSCode我们可以通过安装中文插件将其汉化 重启后我们就得到了中文 VSCode 添加环境变量我们可以先打开终端，尝试输入：g++ --version 如果你的终端返回了 g++ 的版本信息，恭喜，您 C++ 编译器的环境变量配置正确，可以跳过这一章 如果你的终端返回了：&#39;g++&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件。那么则说明你的终端不知道 g++ 是什么命令，接下来需要根据我的教程添加环境变量 什么是环境变量？ 当你的 Shell 在执行命令时，会尝试在一系列路径下搜索同名的可执行文件。这一系列路径我们就称作是环境变量。 Windows 用户可以在终端中输入 path 来查看当前环境变量（由于我进行过一系列配置，所以其输出结果可能与你的不同）： 没错，就是这一系列文件夹。回忆我们刚才执行 g++ --version 命令的时候，我们的终端会在这一系列文件夹下为我们寻找叫做 g++ 的可执行文件。如果找到了名为 g++ 的可执行文件，我们的终端就会将参数传入，将其执行；而如果我们的终端没有找到，那么就会向我们报告“未知命令”。 我们刚刚已经理解了环境变量的运行逻辑，接下来我们讲解如何进行环境变量的配置。 对于 Windows 用户，请按下 Windows + S 打开搜索框，在其中输入 path，然后选择”环境变量”，然后选择“系统变量”中的 Path 字段，双击打开后即可配置。 接下来我们安装MinGW64 MinGW 的全称是：Minimalist GNU on Windows。 它实际上是将经典的开源 C 语言编译器 GCC 移植到了 Windows 平台下，并且包含了 Win32API，因此可以将源代码编译为可在 Windows 中运行的可执行程序。而且还可以使用一些 Windows 不具备的，Linux平台下的开发工具。 一句话来概括：MinGW 就是 GCC 的 Windows 版本。这是将你写的 C/C++ 语言的源代码编译成汇编代码，进而链接成可执行文件的工具。之前我们的 Dev-C++ 事实上也集成了这个工具。 我们下载官方的安装工具（链接)），下载完成后打开，无需进行更改，一路点击下一步 安装完成之后会自动打开MinGW Installation Manager 我们点击左侧栏中的 Basic Setup ，右侧勾选 mingw32-base 和 mingw32-gcc-g++ 这两个包 之后点击菜单栏中 Installation 的 Apply Changes 等待片刻，MinGW即可安装在你的电脑中 然后，我们需要进行环境变量配置。进入 Mingw64 的安装路径/mingw64/bin/，我们可以看到 gcc，g++ 这些我们熟悉的可执行文件。然后我们需要做的就是将这个文件夹添加至环境变量中。 然后我们就可以打开终端，输入 g++ --version 验证环境变量是否配置成功。（请注意，在环境变量配置后需要重启终端才能生效） 插件安装与设置这时候我们再装两个插件，一个叫 C/C++，一个叫 Code Runner 然后我们在设置里搜索 code-runner.runInTerminal ，勾选这一项 VSCode，启动！之后我们点击这个按钮就能在内部终端运行.c 程序了 其他设置那如果你习惯了用外部终端，可以这样设置一下 在设置中搜索 code-runner.languageIdToFileExtensionMap ，并在 setting.json 中编辑文件 在”code-runner.executorMap”这个对象键中加入以下代码 1234567&quot;code-runner.executorMap&quot;: &#123;&quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,&quot;c&quot;: &quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;&#125;,","categories":[{"name":"VSCode","slug":"VSCode","permalink":"https://houyi2333.github.io/categories/VSCode/"}],"tags":[]}],"categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://houyi2333.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"线性代数","slug":"线性代数","permalink":"https://houyi2333.github.io/categories/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"学习指南","slug":"学习指南","permalink":"https://houyi2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"},{"name":"具体数学","slug":"具体数学","permalink":"https://houyi2333.github.io/categories/%E5%85%B7%E4%BD%93%E6%95%B0%E5%AD%A6/"},{"name":"VSCode","slug":"VSCode","permalink":"https://houyi2333.github.io/categories/VSCode/"}],"tags":[]}